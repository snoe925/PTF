Package:	language/tcl/tcl

Description:	Tcl - Tool Command Language

Version:	3.3

Notes:

  Tcl stands for ``tool command language'' and is pronounced ``tickle.''
  It is actually two things: a language and a library.  First, Tcl is a
  simple textual language, intended primarily for issuing commands to
  interactive programs such as text editors, debuggers, illustrators, and
  shells.  It has a simple syntax and is also programmable, so Tcl users
  can write command procedures to provide more powerful commands than those
  in the built-in set.

  Second, Tcl is a library package that can be embedded in application
  programs.  The Tcl library consists of a parser for the Tcl language,
  routines to implement the Tcl built-in commands, and procedures that
  allow each application to extend Tcl with additional commands specific
  to that application.  The application program generates Tcl commands
  and passes them to the Tcl parser for execution.  Commands may be
  generated by reading characters from an input source, or by associating
  command strings with elements of the application's user interface, such
  as menu entries, buttons, or keystrokes.  When the Tcl library receives
  commands it parses them into component fields and executes built-in
  commands directly.  For commands implemented by the application, Tcl
  calls back to the application to execute the commands.  In many cases
  commands will invoke recursive invocations of the Tcl interpreter by
  passing in additional strings to execute (procedures, looping commands,
  and conditional commands all work in this way).

  An application program gains three advantages by using Tcl for its
  command language.  First, Tcl provides a standard syntax:  once users
  know Tcl, they will be able to issue commands easily to any Tcl-based
  application.  Second, Tcl provides programmability.  All a Tcl
  application needs to do is to implement a few application-specific
  low-level commands.  Tcl provides many utility commands plus a general
  programming interface for building up complex command procedures.  By
  using Tcl, applications need not re-implement these features.  Third,
  Tcl will eventually provide a mechanism for communicating between
  applications:  it will be possible to send Tcl commands from one
  application to another.  The common Tcl language framework will make it
  easier for applications to communicate with one another.  The
  communication features are not implemented in the current version of Tcl.

	.../Tcl.man

Language(s):    C

Requirements:   ?

Origin:         UC Berkeley
		(see a2z/origins/ucb.doc)

See Also:       ?

Restrictions:   See .../*.c

References:

  Tcl: An Embeddable Command Language
  John K. Ousterhout
  USENIX Proceedings, Winter, 1990

